import os
import json
import pycocotools.mask as mask_utils
import cv2
import numpy as np
import random

mask_dir = 'test-dev/refined_proposals'
#img_dir = './data/test/Annotations/'
jpg_dir = "/media/vltanh/NaruBibi's/data/DAVIS/DAVIS-2017-test-dev-480p/DAVIS/JPEGImages/480p"
out_dir = 'vis-test-dev'
alpha = 0.6

pascal_colormap = np.array([
    0,         0,         0,
    0.5020,         0,         0,
    0,    0.5020,         0,
    0.5020,    0.5020,         0,
    0,         0,    0.5020,
    0.5020,         0,    0.5020,
    0,    0.5020,    0.5020,
    0.5020,    0.5020,    0.5020,
    0.2510,         0,         0,
    0.7529,         0,         0,
    0.2510,    0.5020,         0,
    0.7529,    0.5020,         0,
    0.2510,         0,    0.5020,
    0.7529,         0,    0.5020,
    0.2510,    0.5020,    0.5020,
    0.7529,    0.5020,    0.5020,
    0,    0.2510,         0,
    0.5020,    0.2510,         0,
    0,    0.7529,         0,
    0.5020,    0.7529,         0,
    0,    0.2510,    0.5020,
    0.5020,    0.2510,    0.5020,
    0,    0.7529,    0.5020,
    0.5020,    0.7529,    0.5020,
    0.2510,    0.2510,         0,
    0.7529,    0.2510,         0,
    0.2510,    0.7529,         0,
    0.7529,    0.7529,         0,
    0.2510,    0.2510,    0.5020,
    0.7529,    0.2510,    0.5020,
    0.2510,    0.7529,    0.5020,
    0.7529,    0.7529,    0.5020,
    0,         0,    0.2510,
    0.5020,         0,    0.2510,
    0,    0.5020,    0.2510,
    0.5020,    0.5020,    0.2510,
    0,         0,    0.7529,
    0.5020,         0,    0.7529,
    0,    0.5020,    0.7529,
    0.5020,    0.5020,    0.7529,
    0.2510,         0,    0.2510,
    0.7529,         0,    0.2510,
    0.2510,    0.5020,    0.2510,
    0.7529,    0.5020,    0.2510,
    0.2510,         0,    0.7529,
    0.7529,         0,    0.7529,
    0.2510,    0.5020,    0.7529,
    0.7529,    0.5020,    0.7529,
    0,    0.2510,    0.2510,
    0.5020,    0.2510,    0.2510,
    0,    0.7529,    0.2510,
    0.5020,    0.7529,    0.2510,
    0,    0.2510,    0.7529,
    0.5020,    0.2510,    0.7529,
    0,    0.7529,    0.7529,
    0.5020,    0.7529,    0.7529,
    0.2510,    0.2510,    0.2510,
    0.7529,    0.2510,    0.2510,
    0.2510,    0.7529,    0.2510,
    0.7529,    0.7529,    0.2510,
    0.2510,    0.2510,    0.7529,
    0.7529,    0.2510,    0.7529,
    0.2510,    0.7529,    0.7529,
    0.7529,    0.7529,    0.7529,
    0.1255,         0,         0,
    0.6275,         0,         0,
    0.1255,    0.5020,         0,
    0.6275,    0.5020,         0,
    0.1255,         0,    0.5020,
    0.6275,         0,    0.5020,
    0.1255,    0.5020,    0.5020,
    0.6275,    0.5020,    0.5020,
    0.3765,         0,         0,
    0.8784,         0,         0,
    0.3765,    0.5020,         0,
    0.8784,    0.5020,         0,
    0.3765,         0,    0.5020,
    0.8784,         0,    0.5020,
    0.3765,    0.5020,    0.5020,
    0.8784,    0.5020,    0.5020,
    0.1255,    0.2510,         0,
    0.6275,    0.2510,         0,
    0.1255,    0.7529,         0,
    0.6275,    0.7529,         0,
    0.1255,    0.2510,    0.5020,
    0.6275,    0.2510,    0.5020,
    0.1255,    0.7529,    0.5020,
    0.6275,    0.7529,    0.5020,
    0.3765,    0.2510,         0,
    0.8784,    0.2510,         0,
    0.3765,    0.7529,         0,
    0.8784,    0.7529,         0,
    0.3765,    0.2510,    0.5020,
    0.8784,    0.2510,    0.5020,
    0.3765,    0.7529,    0.5020,
    0.8784,    0.7529,    0.5020,
    0.1255,         0,    0.2510,
    0.6275,         0,    0.2510,
    0.1255,    0.5020,    0.2510,
    0.6275,    0.5020,    0.2510,
    0.1255,         0,    0.7529,
    0.6275,         0,    0.7529,
    0.1255,    0.5020,    0.7529,
    0.6275,    0.5020,    0.7529,
    0.3765,         0,    0.2510,
    0.8784,         0,    0.2510,
    0.3765,    0.5020,    0.2510,
    0.8784,    0.5020,    0.2510,
    0.3765,         0,    0.7529,
    0.8784,         0,    0.7529,
    0.3765,    0.5020,    0.7529,
    0.8784,    0.5020,    0.7529,
    0.1255,    0.2510,    0.2510,
    0.6275,    0.2510,    0.2510,
    0.1255,    0.7529,    0.2510,
    0.6275,    0.7529,    0.2510,
    0.1255,    0.2510,    0.7529,
    0.6275,    0.2510,    0.7529,
    0.1255,    0.7529,    0.7529,
    0.6275,    0.7529,    0.7529,
    0.3765,    0.2510,    0.2510,
    0.8784,    0.2510,    0.2510,
    0.3765,    0.7529,    0.2510,
    0.8784,    0.7529,    0.2510,
    0.3765,    0.2510,    0.7529,
    0.8784,    0.2510,    0.7529,
    0.3765,    0.7529,    0.7529,
    0.8784,    0.7529,    0.7529,
    0,    0.1255,         0,
    0.5020,    0.1255,         0,
    0,    0.6275,         0,
    0.5020,    0.6275,         0,
    0,    0.1255,    0.5020,
    0.5020,    0.1255,    0.5020,
    0,    0.6275,    0.5020,
    0.5020,    0.6275,    0.5020,
    0.2510,    0.1255,         0,
    0.7529,    0.1255,         0,
    0.2510,    0.6275,         0,
    0.7529,    0.6275,         0,
    0.2510,    0.1255,    0.5020,
    0.7529,    0.1255,    0.5020,
    0.2510,    0.6275,    0.5020,
    0.7529,    0.6275,    0.5020,
    0,    0.3765,         0,
    0.5020,    0.3765,         0,
    0,    0.8784,         0,
    0.5020,    0.8784,         0,
    0,    0.3765,    0.5020,
    0.5020,    0.3765,    0.5020,
    0,    0.8784,    0.5020,
    0.5020,    0.8784,    0.5020,
    0.2510,    0.3765,         0,
    0.7529,    0.3765,         0,
    0.2510,    0.8784,         0,
    0.7529,    0.8784,         0,
    0.2510,    0.3765,    0.5020,
    0.7529,    0.3765,    0.5020,
    0.2510,    0.8784,    0.5020,
    0.7529,    0.8784,    0.5020,
    0,    0.1255,    0.2510,
    0.5020,    0.1255,    0.2510,
    0,    0.6275,    0.2510,
    0.5020,    0.6275,    0.2510,
    0,    0.1255,    0.7529,
    0.5020,    0.1255,    0.7529,
    0,    0.6275,    0.7529,
    0.5020,    0.6275,    0.7529,
    0.2510,    0.1255,    0.2510,
    0.7529,    0.1255,    0.2510,
    0.2510,    0.6275,    0.2510,
    0.7529,    0.6275,    0.2510,
    0.2510,    0.1255,    0.7529,
    0.7529,    0.1255,    0.7529,
    0.2510,    0.6275,    0.7529,
    0.7529,    0.6275,    0.7529,
    0,    0.3765,    0.2510,
    0.5020,    0.3765,    0.2510,
    0,    0.8784,    0.2510,
    0.5020,    0.8784,    0.2510,
    0,    0.3765,    0.7529,
    0.5020,    0.3765,    0.7529,
    0,    0.8784,    0.7529,
    0.5020,    0.8784,    0.7529,
    0.2510,    0.3765,    0.2510,
    0.7529,    0.3765,    0.2510,
    0.2510,    0.8784,    0.2510,
    0.7529,    0.8784,    0.2510,
    0.2510,    0.3765,    0.7529,
    0.7529,    0.3765,    0.7529,
    0.2510,    0.8784,    0.7529,
    0.7529,    0.8784,    0.7529,
    0.1255,    0.1255,         0,
    0.6275,    0.1255,         0,
    0.1255,    0.6275,         0,
    0.6275,    0.6275,         0,
    0.1255,    0.1255,    0.5020,
    0.6275,    0.1255,    0.5020,
    0.1255,    0.6275,    0.5020,
    0.6275,    0.6275,    0.5020,
    0.3765,    0.1255,         0,
    0.8784,    0.1255,         0,
    0.3765,    0.6275,         0,
    0.8784,    0.6275,         0,
    0.3765,    0.1255,    0.5020,
    0.8784,    0.1255,    0.5020,
    0.3765,    0.6275,    0.5020,
    0.8784,    0.6275,    0.5020,
    0.1255,    0.3765,         0,
    0.6275,    0.3765,         0,
    0.1255,    0.8784,         0,
    0.6275,    0.8784,         0,
    0.1255,    0.3765,    0.5020,
    0.6275,    0.3765,    0.5020,
    0.1255,    0.8784,    0.5020,
    0.6275,    0.8784,    0.5020,
    0.3765,    0.3765,         0,
    0.8784,    0.3765,         0,
    0.3765,    0.8784,         0,
    0.8784,    0.8784,         0,
    0.3765,    0.3765,    0.5020,
    0.8784,    0.3765,    0.5020,
    0.3765,    0.8784,    0.5020,
    0.8784,    0.8784,    0.5020,
    0.1255,    0.1255,    0.2510,
    0.6275,    0.1255,    0.2510,
    0.1255,    0.6275,    0.2510,
    0.6275,    0.6275,    0.2510,
    0.1255,    0.1255,    0.7529,
    0.6275,    0.1255,    0.7529,
    0.1255,    0.6275,    0.7529,
    0.6275,    0.6275,    0.7529,
    0.3765,    0.1255,    0.2510,
    0.8784,    0.1255,    0.2510,
    0.3765,    0.6275,    0.2510,
    0.8784,    0.6275,    0.2510,
    0.3765,    0.1255,    0.7529,
    0.8784,    0.1255,    0.7529,
    0.3765,    0.6275,    0.7529,
    0.8784,    0.6275,    0.7529,
    0.1255,    0.3765,    0.2510,
    0.6275,    0.3765,    0.2510,
    0.1255,    0.8784,    0.2510,
    0.6275,    0.8784,    0.2510,
    0.1255,    0.3765,    0.7529,
    0.6275,    0.3765,    0.7529,
    0.1255,    0.8784,    0.7529,
    0.6275,    0.8784,    0.7529,
    0.3765,    0.3765,    0.2510,
    0.8784,    0.3765,    0.2510,
    0.3765,    0.8784,    0.2510,
    0.8784,    0.8784,    0.2510,
    0.3765,    0.3765,    0.7529,
    0.8784,    0.3765,    0.7529,
    0.3765,    0.8784,    0.7529,
    0.8784,    0.8784,    0.7529]).reshape(-1, 3) * 255

if not os.path.isdir(out_dir):
    os.system('mkdir %s' % out_dir)

for video_id in sorted(os.listdir(mask_dir)):
    video_dir = os.path.join(mask_dir, video_id)

    #video_out_dir = os.path.join(out_dir, video_id.split('_')[0])
    # if not os.path.isdir(video_out_dir):
    #   os.system('mkdir %s' % video_out_dir)
    #video_out_dir = os.path.join(video_out_dir, video_id.split('_')[1])
    # if not os.path.isdir(video_out_dir):
    #   os.system('mkdir %s' % video_out_dir)
    video_out_dir = os.path.join(out_dir, video_id)
    if not os.path.isdir(video_out_dir):
        os.system('mkdir %s' % video_out_dir)

    for image_id in sorted(os.listdir(video_dir)):
        mask_out_dir = os.path.join(
            video_out_dir, image_id.replace('.json', '.png'))
        if os.path.exists(mask_out_dir):
            continue

        if os.path.splitext(image_id)[-1] != '.json':
            continue

        image_dir = os.path.join(video_dir, image_id)
        json_obj = json.load(open(image_dir, 'r'))

        #p = os.path.join(img_dir, video_id, image_id.replace('.json','.png'))
        #img = cv2.imread(p, cv2.IMREAD_COLOR)

        jpg_p = os.path.join(
            jpg_dir, video_id, image_id.replace('.json', '.jpg'))
        jpg_img = cv2.imread(jpg_p, cv2.IMREAD_COLOR)

        #h, w, c = img.shape

        #output = jpg_img.copy()
        #cv2.addWeighted(img, alpha, output, 1 - alpha, 0, output)
        #cv2.imshow('Before', output)

        output = np.zeros(jpg_img.shape)
        cs = random.choices(pascal_colormap, k=len(json_obj))
        for idx, instance in enumerate(json_obj):
            mask = instance['segmentation']
            mask = mask_utils.decode(mask)
            overlay = np.zeros(jpg_img.shape)
            overlay[:] = cs[idx]
            x, y = np.where(mask == 1)
            for x, y in zip(x, y):
                output[x, y] = overlay[x, y]
            # mask_out_dir = os.path.join(video_out_dir, image_id.replace('.json', '.png'))
            # cv2.imwrite(mask_out_dir, mask * 255)

            x, y, w, h = list(map(int, instance['bbox']))
            cv2.rectangle(jpg_img, (x, y),
                          (x + w, y + h), [0, 0, 255])

        vis = jpg_img.copy()
        cv2.addWeighted(output.astype('uint8'), alpha, vis, 1 - alpha, 0, vis)
        #cv2.imshow('Result', vis)
        cv2.imwrite(mask_out_dir, vis)
        # cv2.waitKey()
